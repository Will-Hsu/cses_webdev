  const [upcomingEvents, setUpcomingEvents] = useState([]);
  const [pastEvents, setPastEvents] = useState([]);
  const [selectedYear, setSelectedYear] = useState(null);
  const [selectedMonth, setSelectedMonth] = useState(null);

 
  useEffect(() => {
    // Make the API call to fetch upcoming events
    let upcomingEventsEndpoint = 'http://127.0.0.1:5000/api/v1/events?type=upcoming';
    if (selectedYear) {
      upcomingEventsEndpoint += `&year=${selectedYear}`;
    }
    if (selectedMonth) {
      upcomingEventsEndpoint += `&month=${selectedMonth}`;
    }

    fetch(upcomingEventsEndpoint)
      .then((response) => response.json())
      .then((data) => {
        setUpcomingEvents(data);
      })
      .catch((error) => {
        console.error('Error fetching upcoming events:', error);
      });

    // Make the API call to fetch past events
    let pastEventsEndpoint = 'http://127.0.0.1:5000/api/v1/events?type=past';
    if (selectedYear) {
      pastEventsEndpoint += `&year=${selectedYear}`;
    }
    if (selectedMonth) {
      pastEventsEndpoint += `&month=${selectedMonth}`;
    }

    fetch(pastEventsEndpoint)
      .then((response) => response.json())
      .then((data) => {
        setPastEvents(data);
      })
      .catch((error) => {
        console.error('Error fetching past events:', error);
      });
  }, [selectedYear, selectedMonth]);





  // render 





  

        <div
          style={{
            color: 'white',
            fontSize: '20px',
            fontFamily: 'Chakra Petch',
            fontWeight: '700',
            display: 'flex',
            flexDirection: 'row',
            marginLeft: '39px',
          }}
        >
          {displayedFutureEvents.map((eventData, index) => (
            <React.Fragment key={index}>
              <EventBox
                title={eventData.title}
                targetDate={eventData.targetDate}
                location={eventData.location}
              />
              {/* Add space between EventBoxes */}
              <p
                style={{
                  color: 'white',
                  fontSize: '20px',
                  fontFamily: 'Chakra Petch',
                  fontWeight: '500',
                }}
              >
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              </p>
            </React.Fragment>
          ))}
        </div>

        <div
          style={{
            display: 'flex',
            justifyContent: 'flex-start',
            marginLeft: '30px',
            marginTop: '20px',
          }}
        ></div>

        {/* Past Event Section */}
        <div
          style={{
            color: 'white',
            fontSize: '40px',
            fontFamily: 'Chakra Petch',
            marginLeft: '39px',
            marginTop: '117px',
            fontWeight: '700',
          }}
        >
          <h2> PAST EVENTS</h2>
        </div>

        {/* Buttons for filtering past events */}
        <div
          style={{
            display: 'flex',
            justifyContent: 'flex-start',
            marginLeft: '30px',
            marginTop: '-20px',
          }}
        >
          <Button size="medium" text="2023" onClick={handle2023}></Button>
        </div>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

        {/* Render Past EventBoxes using map */}
        <div
          style={{
            color: 'white',
            fontSize: '20px',
            fontFamily: 'Chakra Petch',
            fontWeight: '700',
            display: 'flex',
            flexDirection: 'row',
            marginLeft: '39px',
          }}
        >
          {displayedPastEvents.map((eventData, index) => (
            <React.Fragment key={index}>
              <EventBox
                title={eventData.title}
                targetDate={eventData.targetDate}
                location={eventData.location}
              />
              {/* Add space between EventBoxes */}
              <p
                style={{
                  color: 'white',
                  fontSize: '20px',
                  fontFamily: 'Chakra Petch',
                  fontWeight: '500',
                }}
              >
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              </p>
            </React.Fragment>
          ))}
        </div>
